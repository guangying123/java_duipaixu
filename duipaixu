import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Scanner;

public class duipaixu {
   public static void main(String[] args){
	   Scanner input = new Scanner(System.in);
	   int N;
	   N = input.nextInt();
	   //a  b两个数组中元素一样，为了对比检验堆排序的准确性
	   int a[] = new int[N];
	   int b[] = new int[N];
	   int tem;
	   for(int i =0; i < N;i++){
		   tem = (int) (Math.random()*1000);
		   a[i] = tem;
		   b[i] = tem;
	   }
	   
	   System.out.println("Arrays.sort自带排序结果如下:");
	   Arrays.sort(b);
	   Show(b);
	   
	   
	   System.out.println("堆排序结果如下: ");
	   Dsort(a);
	   Show(a);
	   
	   
   }
   public static void Dsort(int a[]){
	   buildD(a);
	   int len = a.length;
	   while(len>0){
		   int temp = a[0];
		   a[0] = a[len - 1];
		   a[len - 1] = temp;
		   len--;
		   down(a, len);
	   }
   }
   
   public static void buildD(int a[]) {
	   int len = a.length;
	   for(int j =1;j< len;j++){
		   Up(a, j);
	   }
   }
   
   public static void Up(int a[], int flag){
	   int tt;
	   if(flag > 0 ){
		   int par = (flag - 1)/2;
		   if(a[flag] > a[par]) { // 最大堆   
			   tt = a[par];
			   a[par] = a[flag];
			   a[flag] =tt;
			   Up(a, par);
		   } 
	   }
   }
   public static void down(int a[],int len){
	   int p = 0;
	   int temval =0;
	   while(p < len){
		   int child = 2*p+1;
		   if(child >= len) break;
		   if(child < len -1 && a[child + 1]>a[child] )
			   child++;
		   if(a[p] < a[child] ){
			   temval = a[p];
			   a[p] = a[child];
			   a[child] = temval;
			   p = child;
		   }else break;
	   }
   }
   public static void Show(int a[]){
		for(int i : a){
			System.out.print(i + " ");
		}
		System.out.println();
	}	
}
